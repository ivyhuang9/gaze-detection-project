import os
import pandas as pd


def get_features(video_path, feature_extraction_exe):
    """
    Extracts OpenFace features from a video file.
    
    Parameters:
        video_path (String): path to the video (includes the video within the path)
        feature_extraction_exe (String): path to FeatureExtraction executable within OpenFace
    """
    os.system(feature_extraction_exe + ' -f "' + video_path + '"')

def reformat_data(video_name, directory, human_readable = False):
    """
    Reformats the CSV output of OpenFace FeatureExtraction into the PsychDS format. Creates a CSV file,
    named [video name]_reformatted.csv, with the newly reformatted data in the parent directory of the video.
    
    Parameters:
        video_name (String): name of the video (not including type of file)
        directory (String): path to directory to put the reformatted data in
        human_readable (bool):
            True if should output reformatted file in a human_readable format (i.e. each row reflects a
                change in the trackname)
            False otherwise (i.e. for comparing purposes as in the compare_data function)
    """
    #path to directory that holds output of running OpenFace
    processed_directory = os.path.dirname(os.path.realpath(__file__)) + '/processed/'
    
    #finds csv output from running OpenFace
    data = pd.read_csv(processed_directory + video_name + ".csv", engine='python', delimiter = ', ')   
    #forms DataFrame in desired output format
    reformatted_data = pd.DataFrame(columns=['Time', 'Duration', 'Trackname', 'Comments'])
    #for human_readable = True
    reformatted_index = 0
    
    for index, row in data.iterrows():
        horizontal_gaze_angle = row['gaze_angle_x']
        if row['success'] == 0:
            trackname = 'off'
        elif row['gaze_0_x'] < row['gaze_1_x']:
            trackname = 'away'
        elif horizontal_gaze_angle >= 0.22:
            trackname = 'right'
        else:
            trackname = 'left'
        
        if human_readable:
            if reformatted_index == 0 or reformatted_data.loc[reformatted_index - 1]['Trackname'] != trackname:
                reformatted_data.loc[reformatted_index] = [row['timestamp'], 0, trackname, '(null)']
                reformatted_index += 1
        else:
            reformatted_data.loc[index] = [row['timestamp'], 0, trackname, '(null)']
    
    reformatted_data.to_csv(directory + video_name + '_openface_data.tsv', index=False, sep='\t')

def convert_to_seconds(row):
    """
    Converts the timestamp of a pandas Series into seconds.
    
    Parameters:
        row (pandas Series): includes timestamp (i.e. hour, minute, second, frame)
    
    Returns:
        float: the timestamp in seconds
    """
    return row['Hour']*3600 + row['Minute']*60 + row['Second'] + float(row['Frame'])/30

def compare_data(original_tsv_path, new_tsv_path, video_start_time):
    """
    Compares data in one TSV file to another, and finds accuracy of that TSV file.
    
    Assumes that the TSV file in the original_tsv_path is in the format generated by Khaled's script
    when converting from a Marchman VCX file to a TSV file.
    
    Parameters:
        original_tsv_path (String): path to the TSV file containing the original hand-coded data 
            (i.e. the standard being comparing to). Assumes that it is in the Lookit format (i.e. the 
            format generated by using Khaled's script on the Marchman data).
        new_tsv_path (String): path to the TSV file containing the new data (i.e. the data trying to find 
            accuracy of). Should be in the PsychDS format. This the generated TSV file from the reformat_data 
            function.
        video_start_time (float): timestamp in seconds of the start of the video
    
    Returns:
        float: accuracy of data in the new CSV file when compared to the original CSV file
    """
    original_df = pd.read_csv(original_tsv_path, engine='python', delimiter = '\t')
    new_df = pd.read_csv(new_tsv_path, engine='python', delimiter = '\t')

    trials_start = convert_to_seconds(original_df.iloc[0])
    time_offset = trials_start - video_start_time

    original_index = 0 #to keep track of index within original_tsv
    new_index = 0 #to keep track of index within new_tsv
    num_correct = 0
    count = 0
    
    while new_index < len(new_df):
        #check if past last row of original TSV (trials have ended)
        if original_index == len(original_df) - 1:
            break
        
        if new_df.iloc[new_index]['Time'] >= time_offset:
            #find row within the original TSV file corresponding to the row in the new TSV file
            time_since = convert_to_seconds(original_df.iloc[original_index]) - trials_start
            while time_since <= (new_df.iloc[new_index]['Time'] - time_offset):
                original_index += 1
                if original_index == len(original_df):
                    break
                time_since = convert_to_seconds(original_df.iloc[original_index]) - trials_start
            original_index -= 1
            
            #check if in between trials (i.e. last trial ended but next trial has not started yet)
            if original_df.iloc[original_index]['Trial Status'] == False:
                new_index += 1
                continue
            
            #check if correct classification if trial is ongoing
            if new_df.iloc[new_index]['Trackname'] == original_df.iloc[original_index]['Type']:
                num_correct += 1
                
            count += 1
        new_index += 1

    return num_correct/count


#should modify based on path to video and OpenFace feature extraction executable
video_path = "/Users/ivyhuang/Downloads/gaze-detection-project/raw_data/source_data/10123B.24.M.TL2-24-B.mov"
feature_extraction_exe = "/Users/ivyhuang/Downloads/OpenFace-master/build/bin/FeatureExtraction"

video_directory, video_name = video_path.rsplit('/', 1)
video_name = video_name.rsplit('.', 1)[0]
#location of directory to put the reformatted data (raw_data in the case of the Psych-DS specification)
data_directory = video_directory.rsplit('/', 1)[0] + '/'

#locations of TSV files as specified for Psych-DS
new_tsv_path = data_directory + video_name + '_openface_data.tsv'
original_tsv_path = data_directory + video_name + '_timecourse_data.tsv'

video_start = {'Hour': 23, 'Minute': 51, 'Second': 57, 'Frame': 12} #should be modified based on start time of the video
video_start_sec = convert_to_seconds(pd.Series(video_start))


#calling functions using the above variables
get_features(video_path, feature_extraction_exe)
reformat_data(video_name, data_directory)
accuracy = compare_data(original_tsv_path, new_tsv_path, video_start_sec)
print(accuracy)